package com.employee.admin.config;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.employee.entities.Admin;
import com.employee.service.AdminService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Autowired
	private AdminService adminService;
	 @Bean
	    public PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }

	    @Bean
	    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	        http
	            .csrf(csrf -> csrf.disable()) // Updated method
	            .authorizeHttpRequests(auth -> auth
	                .requestMatchers("/register", "/login").permitAll() // Updated method
	                .anyRequest().authenticated()
	            )
	            .formLogin(form -> form
	                .loginProcessingUrl("/login")
	                .defaultSuccessUrl("/", true)
	            )
	            .logout(logout -> logout
	                .logoutUrl("/logout")
	                .logoutSuccessUrl("/")
	            );

	        return http.build();
	    }


	    @Autowired
	    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
	        auth.userDetailsService(username -> {
	            User user = userService.findByUsername(username);
	            if (user == null) {
	                throw new UsernameNotFoundException("User not found");
	            }
	            return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), new ArrayList<>());
	        }).passwordEncoder(passwordEncoder());
	    }
}
