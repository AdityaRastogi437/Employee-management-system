package com.employee.admin.config;

import java.util.ArrayList;

import org.apache.catalina.filters.CorsFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;


import com.employee.entities.Admin;
import com.employee.service.AdminService;

@Configuration
@EnableWebSecurity
public class AdminConfig {

	@Autowired
	  private UserDetailsService userDetailService;

	    @Bean
	    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	       http
	            .csrf(customizer -> customizer.disable()) // Updated method
	            .authorizeHttpRequests(auth -> auth
	                .requestMatchers("/register", "/login").permitAll() // Updated method
	                .anyRequest().authenticated()
	            )
	            .formLogin(form -> form
	                .loginProcessingUrl("/login")
	                .defaultSuccessUrl("/", true)
	            )
	            .logout(logout -> logout
	                .logoutUrl("/logout")
	                .logoutSuccessUrl("/")
	            )
                .sessionManagement(session->session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED));
	         
	       return http.build();
	    }
	    
	    
	    @Bean
	    public AuthenticationProvider authentionProvider() {
	    	DaoAuthenticationProvider provider=new DaoAuthenticationProvider();
	      provider.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
	      provider.setUserDetailsService(userDetailService);
	      return provider;
	    }

	    @Bean
	    public CorsFilter corsFilter() {
	        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
	        CorsConfiguration config = new CorsConfiguration();
	        config.setAllowCredentials(true);
	        config.addAllowedOrigin("http://localhost:3000"); // Add your frontend origin
	        config.addAllowedHeader("*");
	        config.addAllowedMethod("*"); // Or specify allowed methods (GET, POST, etc.)
	        source.registerCorsConfiguration("/**", config);
	        return new CorsFilter(source);
	    }

		

        
}
